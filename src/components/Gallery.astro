---
import { Image } from 'astro:assets'; // Ensure this import is included
const { collection } = Astro.props;

// Glob import all images from the selected collection (landscapes, nature, etc.)
const allImages = import.meta.glob('/src/assets/{landscapes,nature,plants,urban}/*.{jpg,jpeg,webp,png}', {
  eager: true,
  query: { as: 'image' }
});


// Filter out images based on the collection
const imageEntries = Object.entries(allImages)
  .filter(([path]) => path.includes(`/${collection}/`)) // Ensure the right collection
  .sort(([a], [b]) => a.localeCompare(b)); // Sort by name or filename

// Dynamically import images
const imageImports = await Promise.all(imageEntries.map(async ([path, img]) => {
  const imageModule = await import(path);
  return { path, imgSrc: imageModule.default || imageModule }; // safely access the default export
}));
---

<ul class="gallery" role="list">
  {imageImports.length === 0 ? (
    <li>No images found for this gallery. Please check the collection name.</li>
  ) : (
    imageImports.map(({ path, imgSrc }) => {
      const filename = path.split('/').pop()?.split('.').shift() || "Untitled";

      return (
        <li>
          <figure>
            <Image src={imgSrc} alt={filename.replace(/[-_]/g, ' ')} style={{ width: '100%', height: 'auto' }} />
            <figcaption>{filename.replace(/[-_]/g, ' ')}</figcaption>
          </figure>
        </li>
      );
    })
  )}
</ul>

<style>
.gallery {
  column-width: 300px;
}

figure {
  margin: 0;
  margin-bottom: 1rem;
  display: grid;
  grid-template-areas: "card";
  place-items: end;
  text-transform: capitalize;
}
.gallery figure > * {
  grid-area: card;
}
.gallery figcaption {
  padding: 0.25em 0.5em;
  background-color: hsl(0 0% 100% / 60%);
}
</style>
