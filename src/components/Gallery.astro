---
import { Image } from 'astro:assets';
const { collection } = Astro.props;

// Import both full-size and blurred images
const allImages = import.meta.glob('/src/assets/{landscapes,nature,plants,urban}/*.{jpg,jpeg,webp,png}');
const blurredImages = import.meta.glob('/src/assets/blurred/{landscapes,nature,plants,urban}/*.{jpg,jpeg,webp,png}');

// Filter and sort the main images
const imageEntries = Object.entries(allImages)
  .filter(([path]) => path.includes(`/${collection}/`))
  .sort(([a], [b]) => a.localeCompare(b));

  const imageImports = await Promise.all(imageEntries.map(async ([path, img]) => {
  const resolvedImg: any = await img();
  const filename = path.split('/').pop()?.split('.').shift() || 'Untitled';

  console.log('PATH:', path);
  const parts = path.split('/');
  const collectionName = parts[3];
  const imageFile = parts[4];
  const imageName = imageFile.split('.')[0];

  const blurredPath = `/src/assets/blurred/${collectionName}/${imageName}.webp`;

  let blurredImgSrc = null;
  if (blurredImages[blurredPath]) {
    const resolvedBlurredImg: any = await blurredImages[blurredPath]();
    blurredImgSrc = resolvedBlurredImg.default.src || resolvedBlurredImg.default;

  } else {
    console.warn(`⚠️ Blurred image not found: ${blurredPath}`);
  }

  return {
    imgSrc: resolvedImg.default,
    blurredImgSrc,
    filename
  };
}));
---

<div class="grid">
  {imageImports.length === 0 ? (
    <p>No images found for this gallery. Please check the collection name.</p>
  ) : (
    imageImports.map(({ imgSrc, blurredImgSrc, filename }) => (
      <div>
        <figure class="blur-load" style={`background-image: url(${blurredImgSrc});`}>
          <Image
            src={imgSrc}
            alt={filename.replace(/[-_]/g, ' ')}
          />
          <figcaption>{filename.replace(/[-_]/g, ' ')}</figcaption>
        </figure>
      </div>
    ))
  )}
</div>

<style>
  .grid {
    display:grid;
    grid-template-columns: repeat(auto-fit, minmax(min(300px, 100%), 1fr));
    gap: 1rem;
  }

  .blur-load::before {
    content: "";
    position: absolute;
    inset: 0;
    animation: pulse 2.5s infinite;
  }

  .blur-load.loaded::before {
    content: none;
  }

  @keyframes pulse {
    0% {
      background-color: rgba(255, 255, 255, 0);
    }
    50% {
      background-color: rgba(255, 255, 255, 0.3);
    }
    100% {
      background-color: rgba(255, 255, 255, 0);
    }
  }

  .blur-load {
    position: relative;
    background-size: cover;
    background-position: center;
  }
  .blur-load.loaded > img {
    opacity: 1;
  }
  .blur-load > img {
    opacity: 0;
    transition: opacity 200ms ease-in-out;
  }
  figure {
    margin: 0;
    display: grid;
    grid-template-areas: "card";
    place-items: end;
    text-transform: capitalize;
  }
  .grid figure > * {
    grid-area: card;
  }
  .grid figcaption {
    padding: 0.25em 0.5em;
    background-color: hsl(0 0% 100% / 60%);
  }
  figure img {
    width: 100%;
    height: auto;
    object-position: center;
    object-fit: cover;
  }
</style>
